# Generated by ariadne-codegen
# Source: aesop/graphql/queries

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class GetDatasetCustomMetadata(BaseModel):
    node: Optional[
        Annotated[
            Union[
                "GetDatasetCustomMetadataNodeNode",
                "GetDatasetCustomMetadataNodeDataset",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class GetDatasetCustomMetadataNodeNode(BaseModel):
    typename__: Literal[
        "Crawler",
        "CrawlerRun",
        "Dashboard",
        "Group",
        "Hierarchy",
        "KnowledgeCard",
        "Metric",
        "Namespace",
        "Node",
        "Person",
        "Pipeline",
        "SystemTagCounts",
        "UserDefinedResource",
        "VirtualView",
    ] = Field(alias="__typename")


class GetDatasetCustomMetadataNodeDataset(BaseModel):
    typename__: Literal["Dataset"] = Field(alias="__typename")
    custom_metadata: Optional["GetDatasetCustomMetadataNodeDatasetCustomMetadata"] = (
        Field(alias="customMetadata")
    )


class GetDatasetCustomMetadataNodeDatasetCustomMetadata(BaseModel):
    metadata: List["GetDatasetCustomMetadataNodeDatasetCustomMetadataMetadata"]


class GetDatasetCustomMetadataNodeDatasetCustomMetadataMetadata(BaseModel):
    key: str
    value: str


GetDatasetCustomMetadata.model_rebuild()
GetDatasetCustomMetadataNodeDataset.model_rebuild()
GetDatasetCustomMetadataNodeDatasetCustomMetadata.model_rebuild()
