# Generated by ariadne-codegen
# Source: schema.gql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AggregationMetadataName,
    AnchorEntityType,
    AppPlatform,
    AssetContactValueType,
    AssetEntityType,
    AssetRelationType,
    AssetSubType,
    ChangeRequestStatus,
    ChangeRequestType,
    CrawlerType,
    CustomMetadataDataType,
    DashboardPlatform,
    DashboardType,
    DataPlatform,
    DataQualityStatus,
    DbtMaterializationType,
    EntityType,
    GroupPlatform,
    InAppOnboardingCompletionStep,
    InAppProfileCompletionStep,
    KnowledgeCardState,
    KnowledgeCardType,
    LineageType,
    MetricType,
    NamespaceType,
    Order,
    Persona,
    PipelineType,
    PlatformType,
    QueryDescriptionSupportedStatement,
    QueryDescriptionType,
    SearchContext,
    SearchIndex,
    SystemTagSource,
    ThoughtSpotDataObjectType,
    UserActivityGranularity,
    UserActivitySource,
    UserActivityType,
    UserDefinedOrderType,
    UserDefinedResourceType,
    UserRole,
    VersionUpdateField,
    VirtualViewType,
    WebhookTriggerType,
)


class AISearchQueryInput(BaseModel):
    query: Optional[str] = ""


class AcknowledgeChangeRequestInput(BaseModel):
    acknowledgedBy: Optional["AuditStampInput"] = Field(
        default_factory=lambda: globals()["AuditStampInput"].model_validate(
            {"time": "1970-01-01T00:00:00.000Z"}
        )
    )
    entityId: Optional[str] = ""
    message: Optional[str] = None


class ActivityFeedConnectionFilterInput(BaseModel):
    attached: Optional[bool] = True
    authors: Optional[List[str]] = None
    changeRequestRecipients: Optional[List[str]] = None
    changeRequestStatus: Optional[List[ChangeRequestStatus]] = None
    containsText: Optional[str] = None
    dataGroupId: Optional[str] = None
    entityIds: Optional[List[str]] = None
    fieldPath: Optional[List[str]] = None
    fieldPathNamespace: Optional[str] = None
    followedBy: Optional[List[str]] = None
    governedTags: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    includeArchived: Optional[bool] = None
    includeDeleted: Optional[bool] = False
    includeDraft: Optional[bool] = None
    isFollowing: Optional[bool] = None
    isGenerated: Optional[bool] = None
    isMarkedAsCurated: Optional[bool] = None
    knowledgeCardTypes: Optional[List[KnowledgeCardType]] = Field(
        default_factory=lambda: [
            KnowledgeCardType.CHANGE_REQUEST,
            KnowledgeCardType.DEPRECATION,
            KnowledgeCardType.HOW_TO_USE,
            KnowledgeCardType.INCIDENT,
        ]
    )
    mentioned: Optional[bool] = False
    namespaceTypes: Optional[List[NamespaceType]] = None
    onlyTopLevelComments: Optional[bool] = True
    parentComment: Optional[str] = None
    parsedStatement: Optional[List[QueryDescriptionSupportedStatement]] = None
    personId: Optional[str] = None
    queryIds: Optional[List[str]] = None
    relatedEntityIds: Optional[List[str]] = None
    status: Optional[List[KnowledgeCardState]] = None


class AddTenantInput(BaseModel):
    name: Optional[str] = ""


class AddWebhookInput(BaseModel):
    description: Optional[str] = None
    trigger: Optional[WebhookTriggerType] = WebhookTriggerType.UNKNOWN
    url: Optional[str] = ""


class ApiKeyDeleteInput(BaseModel):
    ids: List[str]


class AssetConnectionFilterInput(BaseModel):
    entityType: List[EntityType]
    knowledgeCardFilters: Optional["KnowledgeCardConnectionFilterInput"] = None


class AssetContactsPatchInput(BaseModel):
    contactsToAdd: Optional[List["DesignatedContactInput"]] = None
    contactsToRemove: Optional[List["DesignatedContactInput"]] = None
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    searchQuery: Optional["SearchArguments"] = None


class AssetDescriptionKnowledgeCardInput(BaseModel):
    description: Optional[str] = ""
    title: Optional[str] = None
    tokenizedContent: Optional["AssetDescriptionTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "AssetDescriptionTokenizedContentInput"
        ].model_validate({})
    )


class AssetDescriptionTokenizedContentInput(BaseModel):
    description: Optional[str] = None


class AssetFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    entityType: Optional[List[AssetEntityType]] = None
    hashtags: Optional[List[str]] = None
    hierarchies: Optional[List[str]] = None
    hierarchiesLength: Optional[int] = None
    isComplete: Optional[bool] = None
    isDeleted: Optional[bool] = None
    isProduction: Optional[bool] = None
    platform: Optional[List[PlatformType]] = None
    subType: Optional[List[AssetSubType]] = None


class AssetGovernedTagsPatchInput(BaseModel):
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    governedTagsToAdd: Optional[List[str]] = None
    governedTagsToRemove: Optional[List[str]] = None
    searchQuery: Optional["SearchArguments"] = None


class AssetLikeInput(BaseModel):
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])


class AssetSort(BaseModel):
    datasetRowCount: Optional[Order] = None
    datasetSize: Optional[Order] = None
    datasetUsage: Optional[Order] = None
    viewCount: Optional[Order] = None


class AssetsConnectionFilterInput(BaseModel):
    contactDisplayNames: Optional[List[str]] = None
    entityType: Optional[List[AssetEntityType]] = None
    governedTags: Optional[List[str]] = None
    name: Optional[str] = None
    subType: Optional[List[AssetSubType]] = None


class AssociatedAssetConnectionFilterInput(BaseModel):
    designatedContacts: Optional[List[str]] = None
    entityType: List[EntityType]
    knowledgeCardFilters: Optional["KnowledgeCardConnectionFilterInput"] = None


class AthenaQueryRequest(BaseModel):
    executionId: Optional[str] = None
    limit: Optional[int] = 10
    nextToken: Optional[str] = None
    statement: Optional[str] = None


class AuditStampInput(BaseModel):
    actor: Optional[str] = None
    time: Optional[Any] = "1970-01-01T00:00:00.000Z"


class AuthorizationInput(BaseModel):
    newUserDefaultRole: Optional[UserRole] = None


class AutoGeneratedDocumentInput(BaseModel):
    path: Optional[List[str]] = Field(default_factory=lambda: [])
    title: Optional[str] = ""


class AzureAdSSOInput(BaseModel):
    metadataUrl: Optional[str] = ""


class BaseConnectionFilter(BaseModel):
    includeDeleted: Optional[bool] = None


class ChangeRequestKnowledgeCardInput(BaseModel):
    acknowledged: Optional["AcknowledgeChangeRequestInput"] = None
    message: Optional[str] = None
    recipientId: Optional[str] = ""
    requestType: Optional[ChangeRequestType] = ChangeRequestType.UNKNOWN
    status: Optional["StatusBaseInput"] = None
    title: Optional[str] = ""
    tokenizedContent: Optional["ChangeRequestTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "ChangeRequestTokenizedContentInput"
        ].model_validate({})
    )


class ChangeRequestStatusPatchInput(BaseModel):
    entityId: Optional[str] = ""
    status: ChangeRequestStatus


class ChangeRequestTokenizedContentInput(BaseModel):
    message: Optional[str] = None


class ColumnDescriptionKnowledgeCardInput(BaseModel):
    description: Optional[str] = ""
    fieldPath: Optional[str] = ""
    fieldPathNamespace: Optional[str] = None
    title: Optional[str] = ""


class CommentInput(BaseModel):
    comment: Optional[str] = ""
    parentCommentId: Optional[str] = None
    title: Optional[str] = ""
    tokenizedContent: Optional["CommentTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "CommentTokenizedContentInput"
        ].model_validate({})
    )


class CommentTokenizedContentInput(BaseModel):
    comment: Optional[str] = None


class CommonColumnAttributesInput(BaseModel):
    contacts: Optional[List["DesignatedContactInput"]] = None
    description: Optional["UserDefinedResourceDescriptionInput"] = None
    entityId: Optional[str] = ""
    exclusion: Optional[List["DatasetColumnsInput"]] = Field(default_factory=lambda: [])
    governedTags: Optional[List[str]] = None


class CommonColumnAttributesPatchInput(BaseModel):
    contactsToAdd: Optional[List["DesignatedContactInput"]] = None
    contactsToRemove: Optional[List["DesignatedContactInput"]] = None
    description: Optional["UserDefinedResourceDescriptionInput"] = None
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    exclusion: Optional[List["DatasetColumnsInput"]] = None
    governedTagsToAdd: Optional[List[str]] = None
    governedTagsToRemove: Optional[List[str]] = None


class ConnectionOrderBy(BaseModel):
    customOrder: Optional["CustomOrder"] = None
    names: Optional[List[str]] = Field(default_factory=lambda: [])
    order: Optional[Order] = Order.Asc


class CrawlerFilter(BaseModel):
    id: Optional[str] = None
    isMetaphorManaged: Optional[bool] = None


class CreateApiKeyInput(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = True
    name: str


class CreateCrawlerInput(BaseModel):
    displayName: Optional[str] = None
    isMetaphorManaged: Optional[bool] = True
    schedule: Optional["CreateCrawlerScheduleInput"] = Field(
        default_factory=lambda: globals()["CreateCrawlerScheduleInput"].model_validate(
            {
                "enabled": False,
                "isDaily": True,
                "type": CreateCrawlerScheduleInput.UNKNOWN,
            }
        )
    )


class CreateCrawlerScheduleInput(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = False
    isDaily: Optional[bool] = True
    schedule: Optional[str] = None
    type: Optional[CrawlerType] = CrawlerType.UNKNOWN


class CustomAttributesInput(BaseModel):
    color: Optional[str] = None
    iconKey: Optional[str] = None


class CustomMetadataConfigInput(BaseModel):
    dataType: Optional[CustomMetadataDataType] = CustomMetadataDataType.STRING
    displayName: Optional[str] = None
    highlight: Optional[bool] = True
    key: Optional[str] = ""
    searchable: Optional[bool] = True


class CustomMetadataFacetFilterInput(BaseModel):
    key: Optional[str] = ""
    values: Optional[List[str]] = Field(default_factory=lambda: [])


class CustomOrder(BaseModel):
    indexedRank: List[str]
    rankIfNotFound: Optional[int] = None


class CustomTagAttributesInput(BaseModel):
    color: Optional[str] = None
    iconKey: Optional[str] = None


class DashboardConnectionFilterInput(BaseModel):
    name: Optional[str] = None


class DashboardFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isComplete: Optional[bool] = None
    isDeleted: Optional[bool] = None
    isProduction: Optional[bool] = None
    platform: Optional[List[DashboardPlatform]] = None


class DashboardIdInput(BaseModel):
    dashboardId: Optional[str] = ""
    platform: Optional[DashboardPlatform] = DashboardPlatform.UNKNOWN


class DashboardSort(BaseModel):
    viewCount: Optional[Order] = None


class DataDocumentInput(BaseModel):
    content: Optional[str] = ""
    title: Optional[str] = None
    tokenizedContent: Optional["DataDocumentTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "DataDocumentTokenizedContentInput"
        ].model_validate({})
    )


class DataDocumentTokenizedContentInput(BaseModel):
    content: Optional[str] = None


class DatasetColumnsInput(BaseModel):
    datasetId: Optional[str] = ""
    datasetLogicalId: Optional["DatasetIdInput"] = None
    fields: Optional[List[str]] = Field(default_factory=lambda: [])


class DatasetColumnsPatternInput(BaseModel):
    globPattern: Optional[str] = ""


class DatasetFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    database: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isComplete: Optional[bool] = None
    isDeleted: Optional[bool] = None
    isProduction: Optional[bool] = None
    platform: Optional[List[DataPlatform]] = None
    schema_: Optional[List[str]] = Field(alias="schema", default=None)


class DatasetIdInput(BaseModel):
    account: Optional[str] = None
    name: Optional[str] = ""
    platform: Optional[DataPlatform] = DataPlatform.UNKNOWN


class DatasetPatternInput(BaseModel):
    account: Optional[str] = None
    database: Optional[str] = ""
    isCaseSensitive: Optional[bool] = False
    platform: Optional[DataPlatform] = DataPlatform.UNKNOWN
    schema_: Optional[str] = Field(alias="schema", default="")
    table: Optional[str] = ""


class DatasetRelationInput(BaseModel):
    types: Optional[List[AssetRelationType]] = None


class DatasetSort(BaseModel):
    rowCount: Optional[Order] = None
    size: Optional[Order] = None
    usage: Optional[Order] = None
    viewCount: Optional[Order] = None


class DbtDownstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class DbtModelRelationInput(BaseModel):
    types: Optional[List[AssetRelationType]] = None


class DbtUpstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class DeleteCrawlerInput(BaseModel):
    ids: Optional[List[str]] = Field(default_factory=lambda: [])


class DeleteWebhooksInput(BaseModel):
    ids: Optional[List[str]] = Field(default_factory=lambda: [])


class DeprecationKnowledgeCardInput(BaseModel):
    detail: Optional[str] = ""
    plannedDate: Optional[Any] = "1970-01-01T00:00:00.000Z"
    title: Optional[str] = None
    tokenizedContent: Optional["DeprecationTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "DeprecationTokenizedContentInput"
        ].model_validate({})
    )


class DeprecationTokenizedContentInput(BaseModel):
    detail: Optional[str] = None


class DesignatedContactInput(BaseModel):
    designation: Optional[str] = ""
    value: Optional[str] = ""
    valueType: Optional[AssetContactValueType] = AssetContactValueType.UNKNOWN


class DropTenantInput(BaseModel):
    id: Optional[str] = ""
    name: Optional[str] = ""


class FieldTagAssociationsPatchInput(BaseModel):
    entityId: Optional[str] = ""
    patchSchemaFieldGovernedTags: Optional[List["FieldTagPatchInput"]] = Field(
        default_factory=lambda: []
    )


class FieldTagPatchInput(BaseModel):
    fieldPath: Optional[str] = ""
    tagsToAdd: Optional[List[str]] = None
    tagsToRemove: Optional[List[str]] = None


class FollowAssetInput(BaseModel):
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    followersToEnroll: Optional[List[str]] = Field(default_factory=lambda: [])
    searchQuery: Optional["SearchArguments"] = None


class GeneratedAssetDescriptionInput(BaseModel):
    entityId: Optional[str] = ""
    fieldPaths: Optional[List[str]] = None
    table: Optional[str] = None


class GoogleSocialLoginInput(BaseModel):
    allowedEmailPatterns: Optional[List[str]] = Field(
        default_factory=lambda: ["@metaphor\\.io$"]
    )


class GoogleWorkspaceSSOInput(BaseModel):
    metadataFile: Optional[str] = ""


class GovernedTagFilterInput(BaseModel):
    commonAttributesLastUpdatedBy: Optional[List[str]] = None
    commonColumnContacts: Optional[List[str]] = None
    commonColumnTags: Optional[List[str]] = None
    createdBy: Optional[List[str]] = None
    designatedContacts: Optional[List[str]] = None
    entityId: Optional[List[str]] = None
    hasParent: Optional[bool] = None
    isChildOf: Optional[List[str]] = None
    name: Optional[str] = None
    type: Optional[List[UserDefinedResourceType]] = Field(
        default_factory=lambda: [UserDefinedResourceType.GOVERNED_TAG]
    )


class GroupConnectionFilterInput(BaseModel):
    creator: Optional[str] = None
    managedBy: Optional[GroupPlatform] = None
    name: Optional[str] = None


class GroupDescriptionInput(BaseModel):
    text: Optional[str] = ""
    tokenizedText: Optional[str] = None


class GroupFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isDeleted: Optional[bool] = None


class GroupInfoInput(BaseModel):
    description: Optional["GroupDescriptionInput"] = None
    email: Optional[str] = None
    entityId: Optional[str] = ""
    externalId: Optional[str] = None
    managedBy: Optional[GroupPlatform] = GroupPlatform.METAPHOR
    members: Optional[List[str]] = Field(default_factory=lambda: [])
    name: Optional[str] = ""
    subgroups: Optional[List[str]] = None


class GroupInput(BaseModel):
    groupInfo: Optional["GroupInfoInput"] = None


class GroupMembersPatchInput(BaseModel):
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    memberIdsToAdd: Optional[List[str]] = None
    memberIdsToRemove: Optional[List[str]] = None


class HardDeletionInput(BaseModel):
    enabled: Optional[bool] = True
    thresholdHours: Optional[float] = 1440


class HashtagInput(BaseModel):
    value: Optional[str] = ""


class HashtagPatchInput(BaseModel):
    entityId: Optional[str] = ""
    hashtagsToAdd: Optional[List[Optional["HashtagInput"]]] = Field(
        default_factory=lambda: []
    )
    hashtagsToRemove: Optional[List[Optional["HashtagInput"]]] = Field(
        default_factory=lambda: []
    )


class HierarchyConnectionFilterInput(BaseModel):
    parentPath: Optional[List[str]] = None


class HierarchyFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isDeleted: Optional[bool] = None


class HierarchyLogicalIdInput(BaseModel):
    path: Optional[List[str]] = Field(default_factory=lambda: [])


class HowToUseTokenizedContentInput(BaseModel):
    detail: Optional[str] = None


class IncidentKnowledgeCardInput(BaseModel):
    detail: Optional[str] = ""
    title: Optional[str] = None
    tokenizedContent: Optional["IncidentTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "IncidentTokenizedContentInput"
        ].model_validate({})
    )


class IncidentTokenizedContentInput(BaseModel):
    detail: Optional[str] = None


class InvitedPersonInput(BaseModel):
    email: Optional[str] = ""
    role: Optional[UserRole] = None


class KnowledgeCardAvailabilityStatusPatchInput(BaseModel):
    entityId: Optional[str] = ""
    isArchived: Optional[bool] = None
    isDraft: Optional[bool] = None
    isPublished: Optional[bool] = None


class KnowledgeCardConnectionFilterInput(BaseModel):
    attached: Optional[bool] = True
    authors: Optional[List[str]] = None
    changeRequestRecipients: Optional[List[str]] = None
    changeRequestStatus: Optional[List[ChangeRequestStatus]] = None
    containsText: Optional[str] = None
    entityIds: Optional[List[str]] = None
    fieldPath: Optional[List[str]] = None
    fieldPathNamespace: Optional[str] = None
    followedBy: Optional[List[str]] = None
    governedTags: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    includeArchived: Optional[bool] = None
    includeDeleted: Optional[bool] = False
    includeDraft: Optional[bool] = None
    isGenerated: Optional[bool] = None
    isMarkedAsCurated: Optional[bool] = None
    knowledgeCardTypes: Optional[List[KnowledgeCardType]] = Field(
        default_factory=lambda: [
            KnowledgeCardType.CHANGE_REQUEST,
            KnowledgeCardType.DEPRECATION,
            KnowledgeCardType.HOW_TO_USE,
            KnowledgeCardType.INCIDENT,
        ]
    )
    mentioned: Optional[bool] = False
    namespaceTypes: Optional[List[NamespaceType]] = None
    onlyTopLevelComments: Optional[bool] = True
    parentComment: Optional[str] = None
    parsedStatement: Optional[List[QueryDescriptionSupportedStatement]] = None
    queryIds: Optional[List[str]] = None
    relatedEntityIds: Optional[List[str]] = None
    status: Optional[List[KnowledgeCardState]] = None


class KnowledgeCardDeleteInput(BaseModel):
    ids: List[str]


class KnowledgeCardDetailInput(BaseModel):
    assetDescription: Optional["AssetDescriptionKnowledgeCardInput"] = None
    changeRequest: Optional["ChangeRequestKnowledgeCardInput"] = None
    columnDescription: Optional["ColumnDescriptionKnowledgeCardInput"] = None
    comment: Optional["CommentInput"] = None
    dataDocument: Optional["DataDocumentInput"] = None
    deprecation: Optional["DeprecationKnowledgeCardInput"] = None
    incident: Optional["IncidentKnowledgeCardInput"] = None
    query: Optional["QueryKnowledgeCardInput"] = None
    type: Optional[KnowledgeCardType] = KnowledgeCardType.UNKNOWN
    usage: Optional["UsageKnowledgeCardInput"] = None


class KnowledgeCardFilters(BaseModel):
    author: Optional[List[str]] = None
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isArchived: Optional[bool] = False
    isDeleted: Optional[bool] = None
    isDraft: Optional[bool] = False
    type: Optional[List[KnowledgeCardType]] = None


class KnowledgeCardIdInput(BaseModel):
    id: Optional[str] = ""


class KnowledgeCardInfoInput(BaseModel):
    anchorEntityId: Optional[str] = None
    detail: Optional["KnowledgeCardDetailInput"] = Field(
        default_factory=lambda: globals()["KnowledgeCardDetailInput"].model_validate(
            {"type": KnowledgeCardDetailInput.UNKNOWN}
        )
    )
    entityId: Optional[str] = ""
    hashtags: Optional[List["HashtagInput"]] = None
    relatedEntityIds: Optional[List[str]] = Field(default_factory=lambda: [])


class KnowledgeCardInput(BaseModel):
    isPublished: Optional[bool] = None
    knowledgeCardInfo: Optional["KnowledgeCardInfoInput"] = None


class KnowledgeCardSort(BaseModel):
    createdAt: Optional[Order] = None
    viewCount: Optional[Order] = None


class LDAPGroupSearchInput(BaseModel):
    baseDN: Optional[str] = ""
    filter: Optional[str] = None
    nameAttr: Optional[str] = "name"


class LDAPInput(BaseModel):
    bindDN: Optional[str] = None
    bindPassword: Optional[str] = None
    groupSearch: Optional["LDAPGroupSearchInput"] = Field(
        default_factory=lambda: globals()["LDAPGroupSearchInput"].model_validate(
            {"baseDN": "", "nameAttr": "name"}
        )
    )
    host: Optional[str] = ""
    userSearch: Optional["LDAPUserSearchInput"] = Field(
        default_factory=lambda: globals()["LDAPUserSearchInput"].model_validate(
            {
                "baseDN": "",
                "emailAttr": "mail",
                "idAttr": "uid",
                "nameAttr": "displayName",
                "username": "mail",
            }
        )
    )


class LDAPUserSearchInput(BaseModel):
    baseDN: Optional[str] = ""
    emailAttr: Optional[str] = "mail"
    filter: Optional[str] = None
    idAttr: Optional[str] = "uid"
    nameAttr: Optional[str] = "displayName"
    username: Optional[str] = "mail"


class LastActiveInput(BaseModel):
    platform: Optional[AppPlatform] = AppPlatform.Unknown


class LineageFilterInput(BaseModel):
    types: Optional[List[LineageType]] = None


class LinkedInSocialLoginInput(BaseModel):
    auth0ClientId: Optional[str] = ""
    auth0ClientSecret: Optional[str] = ""
    auth0Issuer: Optional[str] = ""


class MetricConnectionFilterInput(BaseModel):
    name: Optional[str] = None


class MetricFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isComplete: Optional[bool] = None
    isDeleted: Optional[bool] = None
    isProduction: Optional[bool] = None
    type: Optional[List[MetricType]] = None


class MetricLogicalIdInput(BaseModel):
    name: Optional[str] = ""
    type: Optional[MetricType] = MetricType.UNKNOWN


class MetricSort(BaseModel):
    viewCount: Optional[Order] = None


class MicrosoftSocialLoginInput(BaseModel):
    allowedEmailPatterns: Optional[List[str]] = Field(
        default_factory=lambda: ["@metaphor\\.io$"]
    )


class NamedAssetCollectionInput(BaseModel):
    assetIds: Optional[List[str]] = Field(default_factory=lambda: [])
    name: Optional[str] = ""


class NamespaceAssetsInput(BaseModel):
    assetIds: Optional[List[str]] = Field(default_factory=lambda: [])
    entityId: Optional[str] = ""
    namedAssetCollections: Optional[List["NamedAssetCollectionInput"]] = None


class NamespaceAssetsPatchInput(BaseModel):
    assetIdsToAdd: Optional[List[str]] = None
    assetIdsToRemove: Optional[List[str]] = None
    collectionId: Optional[str] = None
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    namedAssetCollectionName: Optional[str] = None
    removeCollection: Optional[bool] = None


class NamespaceAssetsUserDefinedOrderInput(BaseModel):
    orderedEntry: Optional["OrderedEntryInput"] = Field(
        default_factory=lambda: globals()["OrderedEntryInput"].model_validate(
            {"id": "", "orderedEntries": []}
        )
    )
    type: Optional[UserDefinedOrderType] = UserDefinedOrderType.UNKNOWN


class NamespaceDeleteInput(BaseModel):
    ids: List[str]
    viewerHasConfirmedDeletion: Optional[bool] = False


class NamespaceDescriptionInput(BaseModel):
    text: Optional[str] = ""
    tokenizedText: Optional[str] = None


class NamespaceFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isDeleted: Optional[bool] = None
    type: Optional[List[NamespaceType]] = None


class NamespaceInfoConnectionFilterInput(BaseModel):
    containsAssetIds: Optional[List[str]] = None
    createdBy: Optional[List[str]] = None
    entityId: Optional[List[str]] = None
    hasParent: Optional[bool] = None
    isChildOf: Optional[List[str]] = None
    name: Optional[str] = None
    type: List[NamespaceType]


class NamespaceInfoInput(BaseModel):
    customAttributes: Optional["CustomAttributesInput"] = None
    description: Optional["NamespaceDescriptionInput"] = None
    detail: Optional["NamespaceTypeDetailInput"] = Field(
        default_factory=lambda: globals()["NamespaceTypeDetailInput"].model_validate(
            {"type": NamespaceTypeDetailInput.UNKNOWN}
        )
    )
    entityId: Optional[str] = ""
    name: Optional[str] = ""
    parentId: Optional[str] = None
    visibleTo: Optional[List[str]] = Field(default_factory=lambda: [])


class NamespaceInfoPatchInput(BaseModel):
    customAttributes: Optional["CustomAttributesInput"] = None
    description: Optional["NamespaceDescriptionInput"] = None
    entityId: Optional[str] = ""
    name: Optional[str] = None
    parentId: Optional[str] = None


class NamespaceInput(BaseModel):
    namespaceAssets: Optional["NamespaceAssetsInput"] = None
    namespaceInfo: Optional["NamespaceInfoInput"] = None


class NamespaceTypeDetailInput(BaseModel):
    savedQueries: Optional[List["SavedLiveQueryInput"]] = None
    type: Optional[NamespaceType] = NamespaceType.UNKNOWN


class NonProdInput(BaseModel):
    datasetPatterns: Optional[List["DatasetPatternInput"]] = Field(
        default_factory=lambda: []
    )


class OktaSSOInput(BaseModel):
    clientId: Optional[str] = ""
    clientSecret: Optional[str] = ""
    issuer: Optional[str] = ""


class OrderedEntryInput(BaseModel):
    id: Optional[str] = ""
    orderedEntries: Optional[List["OrderedEntryInput"]] = Field(
        default_factory=lambda: []
    )


class OrganizationInput(BaseModel):
    about: Optional[str] = ""
    logoUrl: Optional[str] = None
    name: Optional[str] = ""


class PersonActivityInput(BaseModel):
    aiQuery: Optional["AISearchQueryInput"] = None
    query: Optional["SearchQueryInput"] = None
    viewedId: Optional[str] = None


class PersonConnectionFilterInput(BaseModel):
    firstLastNameOrEmailPattern: Optional[str] = None
    hasLoggedInOnce: Optional[bool] = None
    personIds: Optional[List[str]] = None
    role: Optional[List[Optional[UserRole]]] = None


class PersonFilter(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isDeleted: Optional[bool] = None


class PersonInput(BaseModel):
    activity: Optional["PersonActivityInput"] = None
    logicalId: Optional["PersonLogicalIdInput"] = Field(
        default_factory=lambda: globals()["PersonLogicalIdInput"].model_validate(
            {"email": "unknown@example.com"}
        )
    )
    organization: Optional["PersonOrganizationInput"] = None
    personalization: Optional["PersonalizationOptionsInput"] = None
    properties: Optional["PersonPropertiesInput"] = None


class PersonLogicalIdInput(BaseModel):
    email: Optional[str] = "unknown@example.com"


class PersonOrganizationInput(BaseModel):
    department: Optional[str] = None
    division: Optional[str] = None
    employeeNumber: Optional[str] = None
    groups: Optional[List[str]] = None
    manager: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None


class PersonOrganizationPatchInput(BaseModel):
    department: Optional[str] = None
    title: Optional[str] = None


class PersonPatchInput(BaseModel):
    entityId: Optional[str] = ""
    organization: Optional["PersonOrganizationPatchInput"] = None
    properties: Optional["PersonPropertiesPatchInput"] = None
    savedQueries: Optional[List["SavedLiveQueryInput"]] = None


class PersonPropertiesInput(BaseModel):
    aboutMe: Optional[str] = None
    avatarUrl: Optional[str] = None
    displayName: Optional[str] = None
    firstName: Optional[str] = ""
    issuer: Optional[str] = None
    lastActive: Optional[Any] = None
    lastLoggedIn: Optional[Any] = None
    lastName: Optional[str] = ""
    mobilePhone: Optional[str] = None
    occupation: Optional[str] = None
    primaryPhone: Optional[str] = None
    providerName: Optional[str] = None
    role: Optional[UserRole] = None
    status: Optional[str] = None


class PersonPropertiesPatchInput(BaseModel):
    aboutMe: Optional[str] = None
    avatarUrl: Optional[str] = None


class PersonalizationOptionsInput(BaseModel):
    entityId: Optional[str] = ""
    persona: Optional[Persona] = None


class PersonalizationOptionsPatchInput(BaseModel):
    getStartedDismissed: Optional[bool] = None
    getStartedStepCompleted: Optional[InAppOnboardingCompletionStep] = None
    profileCompletionDismissed: Optional[bool] = None
    profileCompletionStepCompleted: Optional[InAppProfileCompletionStep] = None
    resetPersonalization: Optional[bool] = None


class PinOrUnpinAssetInput(BaseModel):
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])


class PinsConnectionFilterInput(BaseModel):
    attached: Optional[bool] = True
    authors: Optional[List[str]] = None
    changeRequestRecipients: Optional[List[str]] = None
    changeRequestStatus: Optional[List[ChangeRequestStatus]] = None
    containsAssetIds: Optional[List[str]] = None
    containsText: Optional[str] = None
    entityId: Optional[List[str]] = None
    entityIds: Optional[List[str]] = None
    fieldPath: Optional[List[str]] = None
    fieldPathNamespace: Optional[str] = None
    followedBy: Optional[List[str]] = None
    governedTags: Optional[List[str]] = None
    hasParent: Optional[bool] = None
    hashtags: Optional[List[str]] = None
    includeArchived: Optional[bool] = None
    includeDeleted: Optional[bool] = False
    includeDraft: Optional[bool] = None
    isChildOf: Optional[List[str]] = None
    isGenerated: Optional[bool] = None
    isMarkedAsCurated: Optional[bool] = None
    knowledgeCardTypes: Optional[List[KnowledgeCardType]] = Field(
        default_factory=lambda: [
            KnowledgeCardType.CHANGE_REQUEST,
            KnowledgeCardType.DEPRECATION,
            KnowledgeCardType.HOW_TO_USE,
            KnowledgeCardType.INCIDENT,
        ]
    )
    mentioned: Optional[bool] = False
    namespaceTypes: Optional[List[NamespaceType]] = None
    onlyTopLevelComments: Optional[bool] = True
    parentComment: Optional[str] = None
    parsedStatement: Optional[List[QueryDescriptionSupportedStatement]] = None
    queryIds: Optional[List[str]] = None
    relatedEntityIds: Optional[List[str]] = None
    status: Optional[List[KnowledgeCardState]] = None


class PipelineFilter(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isComplete: Optional[bool] = None
    isDeleted: Optional[bool] = None
    isProduction: Optional[bool] = None
    type: Optional[List[PipelineType]] = None


class PowerQueryExplainerInput(BaseModel):
    entityId: Optional[str] = ""
    regenerate: Optional[bool] = False
    table: Optional[str] = None


class PurgeDataQualityInput(BaseModel):
    enabled: Optional[bool] = True
    thresholdHours: Optional[float] = 48


class QueryDescriptionTokenizedContentInput(BaseModel):
    explanation: Optional[str] = None


class QueryExplainerInput(BaseModel):
    explanation: Optional[str] = ""
    tokenizedContent: Optional["QueryDescriptionTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "QueryDescriptionTokenizedContentInput"
        ].model_validate({})
    )
    type: Optional[QueryDescriptionType] = QueryDescriptionType.Freeform


class QueryInfoConnectionFilterInput(BaseModel):
    datasetId: Optional[str] = None
    hideDuplicates: Optional[bool] = True
    hideServiceAccount: Optional[bool] = True
    issuedBy: Optional[List[str]] = None
    lookbackDays: Optional[int] = 1


class QueryKnowledgeCardInput(BaseModel):
    explanations: Optional[List["QueryExplainerInput"]] = None
    isCurationRequest: Optional[bool] = None
    isGenerated: Optional[bool] = False
    isMarkedAsCurated: Optional[bool] = False
    query: Optional[str] = ""
    queryId: Optional[str] = ""
    title: Optional[str] = ""


class QueryKnowledgeCardPatchInput(BaseModel):
    entityId: Optional[str] = ""
    explanationsToAdd: Optional[List["QueryExplainerInput"]] = None
    explanationsToRemove: Optional[List[str]] = None
    isGenerated: Optional[bool] = None
    isMarkedAsCurated: Optional[bool] = None
    query: Optional[str] = None
    title: Optional[str] = None


class QueryRequest(BaseModel):
    limit: Optional[int] = 10
    skip: Optional[int] = 0
    statement: Optional[str] = ""


class RecentUserActivitiesFilterInput(BaseModel):
    activityType: Optional[UserActivityType] = None
    granularity: Optional[UserActivityGranularity] = None
    lookbackDays: Optional[int] = None
    source: Optional[UserActivitySource] = None


class RelatedAssetsPatchInput(BaseModel):
    entityIds: Optional[List[str]] = Field(default_factory=lambda: [])
    entityIdsToAdd: Optional[List[str]] = None
    entityIdsToRemove: Optional[List[str]] = None


class ResourceInfoConnectionFilterInput(BaseModel):
    commonAttributesLastUpdatedBy: Optional[List[str]] = None
    commonColumnContacts: Optional[List[str]] = None
    commonColumnTags: Optional[List[str]] = None
    createdBy: Optional[List[str]] = None
    designatedContacts: Optional[List[str]] = None
    entityId: Optional[List[str]] = None
    hasParent: Optional[bool] = None
    isChildOf: Optional[List[str]] = None
    name: Optional[str] = None
    type: List[UserDefinedResourceType]


class SQLExplainerInput(BaseModel):
    queryId: Optional[str] = ""
    regenerate: Optional[bool] = False


class SSOInput(BaseModel):
    azureAd: Optional["AzureAdSSOInput"] = None
    googleWorkspace: Optional["GoogleWorkspaceSSOInput"] = None
    ldap: Optional["LDAPInput"] = None
    okta: Optional["OktaSSOInput"] = None


class SavedLiveQueryInput(BaseModel):
    context: Optional[SearchContext] = None
    facetsJSON: Optional[str] = None
    keyword: Optional[str] = ""
    name: Optional[str] = None


class SearchArguments(BaseModel):
    aggregations: Optional[List[AggregationMetadataName]] = None
    facets: Optional["SearchFacets"] = None
    fieldsSelection: Optional["SearchResultFieldsSelection"] = None
    filters: Optional["SearchQueryFilters"] = None
    from_: Optional[int] = Field(alias="from", default=0)
    indices: Optional[List[SearchIndex]] = Field(
        default_factory=lambda: [SearchIndex.Datasets]
    )
    input: str
    metaOnly: Optional[bool] = False
    relatedAssets: Optional[List[str]] = None
    scoreDetails: Optional[bool] = None
    searchAfter: Optional[str] = None
    size: Optional[int] = 10
    sort: Optional["SearchResultSort"] = None


class SearchFacets(BaseModel):
    anchorEntityType: Optional[List[AnchorEntityType]] = None
    authorDisplayName: Optional[List[str]] = None
    contactDisplayNames: Optional[List[str]] = None
    customMetadata: Optional[List["CustomMetadataFacetFilterInput"]] = None
    dashboardPlatform: Optional[List[DashboardPlatform]] = None
    dashboardType: Optional[List[DashboardType]] = None
    dataPlatform: Optional[List[DataPlatform]] = None
    dataQuality: Optional[List[DataQualityStatus]] = None
    database: Optional[List[str]] = None
    dbtMaterializationType: Optional[List[DbtMaterializationType]] = None
    dbtTags: Optional[List[str]] = None
    department: Optional[List[str]] = None
    directory: Optional[List[str]] = None
    domainDisplayName: Optional[List[str]] = None
    domainDisplayNames: Optional[List[str]] = None
    governedTags: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    knowledgeCardType: Optional[List[KnowledgeCardType]] = None
    lookerTags: Optional[List[str]] = None
    materializationType: Optional[List[str]] = None
    model: Optional[List[str]] = None
    platform: Optional[List[PlatformType]] = None
    project: Optional[List[str]] = None
    schema_: Optional[List[str]] = Field(alias="schema", default=None)
    snowflakeTags: Optional[List[str]] = None
    subType: Optional[List[AssetSubType]] = None
    tableauTags: Optional[List[str]] = None
    thoughtSpotDataObjectType: Optional[List[ThoughtSpotDataObjectType]] = None
    thoughtSpotTags: Optional[List[str]] = None
    unityCatalogTags: Optional[List[str]] = None
    usageLevel: Optional[List[str]] = None
    workspace: Optional[List[str]] = None


class SearchQueryFilters(BaseModel):
    assetFilters: Optional["AssetFilters"] = None
    dashboardFilters: Optional["DashboardFilters"] = None
    datasetFilters: Optional["DatasetFilters"] = None
    groupFilters: Optional["GroupFilters"] = None
    hierarchyFilters: Optional["HierarchyFilters"] = None
    knowledgeCardFilters: Optional["KnowledgeCardFilters"] = None
    metricFilters: Optional["MetricFilters"] = None
    namespaceFilters: Optional["NamespaceFilters"] = None
    personFilters: Optional["PersonFilter"] = None
    pipelineFilters: Optional["PipelineFilter"] = None
    userDefinedResourceFilters: Optional["UserDefinedResourceFilters"] = None
    virtualViewFilters: Optional["VirtualViewFilters"] = None


class SearchQueryInput(BaseModel):
    context: Optional[SearchContext] = None
    facetsJSON: Optional[str] = None
    keyword: Optional[str] = ""
    name: Optional[str] = None


class SearchResultFieldsSelection(BaseModel):
    excludes: Optional[List[str]] = Field(default_factory=lambda: [])
    includes: Optional[List[str]] = Field(default_factory=lambda: [])


class SearchResultSort(BaseModel):
    assetSort: Optional["AssetSort"] = None
    dashboardSort: Optional["DashboardSort"] = None
    datasetSort: Optional["DatasetSort"] = None
    knowledgeCardSort: Optional["KnowledgeCardSort"] = None
    metricSort: Optional["MetricSort"] = None
    virtualViewSort: Optional["VirtualViewSort"] = None


class SettingsInput(BaseModel):
    authorization: Optional["AuthorizationInput"] = None
    customMetadataConfig: Optional[List["CustomMetadataConfigInput"]] = None
    customUserDefinedOrderHierarchy: Optional[List["UserSpecifiedOrderingInput"]] = None
    hardDeletion: Optional["HardDeletionInput"] = None
    nonProd: Optional["NonProdInput"] = None
    organization: Optional["OrganizationInput"] = None
    purgeDataQuality: Optional["PurgeDataQualityInput"] = None
    serviceAccounts: Optional[List[str]] = None
    socialLogin: Optional["SocialLoginInput"] = None
    softDeletion: Optional["SoftDeletionInput"] = None
    sso: Optional["SSOInput"] = None


class SocialLoginInput(BaseModel):
    google: Optional["GoogleSocialLoginInput"] = None
    linkedIn: Optional["LinkedInSocialLoginInput"] = None
    microsoft: Optional["MicrosoftSocialLoginInput"] = None


class SoftDeletionInput(BaseModel):
    enabled: Optional[bool] = True
    thresholdHours: Optional[float] = 168


class StatusBaseInput(BaseModel):
    status: Optional[ChangeRequestStatus] = ChangeRequestStatus.OPEN


class SystemTagsConnectionFilterInput(BaseModel):
    matchPrefix: Optional[str] = None
    sources: Optional[List[SystemTagSource]] = Field(
        default_factory=lambda: [
            SystemTagSource.DATAHUB,
            SystemTagSource.DBT,
            SystemTagSource.LOOKER,
            SystemTagSource.SNOWFLAKE,
            SystemTagSource.TABLEAU,
            SystemTagSource.THOUGHT_SPOT,
            SystemTagSource.UNITY_CATALOG,
        ]
    )


class TableauDatasourceDownstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class TableauDatasourceUpstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class ThoughtSpotDataObjectDownstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class ThoughtSpotDataObjectUpstreamLineageInput(BaseModel):
    types: Optional[List[LineageType]] = None


class ToggleMuteNotificationInput(BaseModel):
    entityId: Optional[str] = ""


class UniversalSearchInput(BaseModel):
    queryId: Optional[str] = ""
    regenerate: Optional[bool] = False
    searchQuery: Optional[str] = ""


class UpdateApiKeyInput(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = True
    name: Optional[str] = None


class UpdateCrawlerInput(BaseModel):
    contacts: Optional[List[str]] = None
    crawlerConfig: Optional[str] = None
    displayName: Optional[str] = None
    schedule: Optional["UpdateCrawlerScheduleInput"] = None


class UpdateCrawlerScheduleInput(BaseModel):
    description: Optional[str] = None
    enabled: Optional[bool] = False
    isDaily: Optional[bool] = True
    schedule: Optional[str] = None


class UsageKnowledgeCardInput(BaseModel):
    detail: Optional[str] = ""
    example: Optional[str] = None
    title: Optional[str] = None
    tokenizedContent: Optional["HowToUseTokenizedContentInput"] = Field(
        default_factory=lambda: globals()[
            "HowToUseTokenizedContentInput"
        ].model_validate({})
    )


class UserDefinedResourceDeleteInput(BaseModel):
    ids: List[str]


class UserDefinedResourceDescriptionInput(BaseModel):
    text: Optional[str] = ""
    tokenizedText: Optional[str] = None


class UserDefinedResourceFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isDeleted: Optional[bool] = None
    type: Optional[List[UserDefinedResourceType]] = None


class UserDefinedResourceInfoInput(BaseModel):
    customTagAttributes: Optional["CustomTagAttributesInput"] = None
    description: Optional["UserDefinedResourceDescriptionInput"] = None
    entityId: Optional[str] = ""
    name: Optional[str] = ""
    parentResourceId: Optional[str] = None
    type: Optional[UserDefinedResourceType] = UserDefinedResourceType.UNKNOWN


class UserDefinedResourceInput(BaseModel):
    childResourceInputs: Optional[List["UserDefinedResourceInput"]] = None
    commonColumnAttributes: Optional["CommonColumnAttributesInput"] = None
    userDefinedResourceInfo: Optional["UserDefinedResourceInfoInput"] = None


class UserSpecifiedOrderingInput(BaseModel):
    orderedEntries: Optional[List["OrderedEntryInput"]] = Field(
        default_factory=lambda: []
    )
    type: Optional[UserDefinedOrderType] = UserDefinedOrderType.UNKNOWN


class VersionHistoryConnectionFilterInput(BaseModel):
    updated: Optional[List[VersionUpdateField]] = None


class VirtualViewFilters(BaseModel):
    browsePaths: Optional[List[str]] = None
    domains: Optional[List[str]] = None
    hashtags: Optional[List[str]] = None
    isComplete: Optional[bool] = None
    isDeleted: Optional[bool] = None
    isProduction: Optional[bool] = None
    type: Optional[List[VirtualViewType]] = None


class VirtualViewLogicalIdInput(BaseModel):
    name: Optional[str] = ""
    type: Optional[VirtualViewType] = VirtualViewType.UNKNOWN


class VirtualViewSort(BaseModel):
    viewCount: Optional[Order] = None


AcknowledgeChangeRequestInput.model_rebuild()
AssetConnectionFilterInput.model_rebuild()
AssetContactsPatchInput.model_rebuild()
AssetDescriptionKnowledgeCardInput.model_rebuild()
AssetGovernedTagsPatchInput.model_rebuild()
AssociatedAssetConnectionFilterInput.model_rebuild()
ChangeRequestKnowledgeCardInput.model_rebuild()
CommentInput.model_rebuild()
CommonColumnAttributesInput.model_rebuild()
CommonColumnAttributesPatchInput.model_rebuild()
ConnectionOrderBy.model_rebuild()
CreateCrawlerInput.model_rebuild()
DataDocumentInput.model_rebuild()
DatasetColumnsInput.model_rebuild()
DeprecationKnowledgeCardInput.model_rebuild()
FieldTagAssociationsPatchInput.model_rebuild()
FollowAssetInput.model_rebuild()
GroupInfoInput.model_rebuild()
GroupInput.model_rebuild()
HashtagPatchInput.model_rebuild()
IncidentKnowledgeCardInput.model_rebuild()
KnowledgeCardDetailInput.model_rebuild()
KnowledgeCardInfoInput.model_rebuild()
KnowledgeCardInput.model_rebuild()
LDAPInput.model_rebuild()
NamespaceAssetsInput.model_rebuild()
NamespaceAssetsUserDefinedOrderInput.model_rebuild()
NamespaceInfoInput.model_rebuild()
NamespaceInfoPatchInput.model_rebuild()
NamespaceInput.model_rebuild()
NamespaceTypeDetailInput.model_rebuild()
NonProdInput.model_rebuild()
OrderedEntryInput.model_rebuild()
PersonActivityInput.model_rebuild()
PersonInput.model_rebuild()
PersonPatchInput.model_rebuild()
QueryExplainerInput.model_rebuild()
QueryKnowledgeCardInput.model_rebuild()
QueryKnowledgeCardPatchInput.model_rebuild()
SSOInput.model_rebuild()
SearchArguments.model_rebuild()
SearchFacets.model_rebuild()
SearchQueryFilters.model_rebuild()
SearchResultSort.model_rebuild()
SettingsInput.model_rebuild()
SocialLoginInput.model_rebuild()
UpdateCrawlerInput.model_rebuild()
UsageKnowledgeCardInput.model_rebuild()
UserDefinedResourceInfoInput.model_rebuild()
UserDefinedResourceInput.model_rebuild()
UserSpecifiedOrderingInput.model_rebuild()
