# Generated by ariadne-codegen
# Source: aesop/graphql/queries

from typing import Any, Dict, List, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_governed_tag import CreateGovernedTag
from .create_knowledge_card import CreateKnowledgeCard
from .get_setup_info import GetSetupInfo
from .input_types import KnowledgeCardInput, UserDefinedResourceInput
from .list_governed_tags import ListGovernedTags


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def create_governed_tag(
        self, input: List[UserDefinedResourceInput], **kwargs: Any
    ) -> CreateGovernedTag:
        query = gql(
            """
            mutation createGovernedTag($input: [UserDefinedResourceInput!]!) {
              createUserDefinedResource(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="createGovernedTag",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGovernedTag.model_validate(data)

    def create_knowledge_card(
        self, data: KnowledgeCardInput, **kwargs: Any
    ) -> CreateKnowledgeCard:
        query = gql(
            """
            mutation createKnowledgeCard($data: KnowledgeCardInput!) {
              createKnowledgeCard(data: $data) {
                knowledgeCardInfo {
                  detail {
                    type
                    changeRequest {
                      status {
                        status
                        lastModified {
                          time
                          actingPerson {
                            properties {
                              firstName
                            }
                          }
                        }
                        created {
                          time
                          actingPerson {
                            properties {
                              firstName
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"data": data}
        response = self.execute(
            query=query,
            operation_name="createKnowledgeCard",
            variables=variables,
            **kwargs
        )
        _data = self.get_data(response)
        return CreateKnowledgeCard.model_validate(_data)

    def get_setup_info(self, **kwargs: Any) -> GetSetupInfo:
        query = gql(
            """
            query getSetupInfo {
              setupInfo {
                oidc {
                  signInRedirectUrl
                }
                saml {
                  entityId
                  replyACSUrl
                  signOnUrl
                }
                crawlerIpAddresses
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="getSetupInfo", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetSetupInfo.model_validate(data)

    def list_governed_tags(
        self,
        name: Union[Optional[str], UnsetType] = UNSET,
        end_cursor: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ListGovernedTags:
        query = gql(
            """
            query listGovernedTags($name: String, $endCursor: String) {
              userDefinedResources(
                first: 50
                after: $endCursor
                filters: {name: $name, type: [GOVERNED_TAG]}
              ) {
                edges {
                  node {
                    id
                    userDefinedResourceInfo {
                      name
                      description {
                        text
                      }
                    }
                  }
                }
                pageInfo {
                  hasNextPage
                  endCursor
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "endCursor": end_cursor}
        response = self.execute(
            query=query,
            operation_name="listGovernedTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ListGovernedTags.model_validate(data)
