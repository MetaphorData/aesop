# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from . import Persona, UserRole
from .custom_fields import (
    ApiKeyDeletionPayloadFields,
    ApiKeyFields,
    CrawlerFields,
    DatasetFields,
    DeleteCrawlersResponseFields,
    DeleteWebhookResponseFields,
    EntityInterface,
    FollowOrUnfollowOutputFields,
    GroupFields,
    KnowledgeCardDeletePayloadFields,
    KnowledgeCardFields,
    MetricFields,
    NamespaceDeletePayloadFields,
    NamespaceFields,
    PersonFields,
    PersonPinsPinningOutputFields,
    RunCrawlerResponseFields,
    SettingsFields,
    TenantInfoFields,
    UserDefinedResourceDeletePayloadFields,
    UserDefinedResourceFields,
    WebhookFields,
)
from .custom_typing_fields import GraphQLField
from .input_types import (
    AcknowledgeChangeRequestInput,
    AddTenantInput,
    AddWebhookInput,
    ApiKeyDeleteInput,
    AssetContactsPatchInput,
    AssetGovernedTagsPatchInput,
    AssetLikeInput,
    ChangeRequestStatusPatchInput,
    CommonColumnAttributesPatchInput,
    CommonColumnDescriptionExclusionInput,
    CreateApiKeyInput,
    CreateCrawlerInput,
    DeleteCrawlerInput,
    DeleteWebhooksInput,
    DropTenantInput,
    FieldTagAssociationsPatchInput,
    FollowAssetInput,
    GroupInfoInput,
    GroupInput,
    GroupMembersPatchInput,
    HashtagPatchInput,
    InvitedPersonInput,
    KnowledgeCardAvailabilityStatusPatchInput,
    KnowledgeCardDeleteInput,
    KnowledgeCardInfoInput,
    KnowledgeCardInput,
    LastActiveInput,
    MetricInfoPatchInput,
    NamespaceAssetsPatchInput,
    NamespaceAssetsUserDefinedOrderInput,
    NamespaceDeleteInput,
    NamespaceInfoInput,
    NamespaceInfoPatchInput,
    NamespaceInput,
    PersonActivityInput,
    PersonalizationOptionsPatchInput,
    PersonInput,
    PersonPatchInput,
    PinOrUnpinAssetInput,
    QueryKnowledgeCardPatchInput,
    SettingsInput,
    UpdateApiKeyInput,
    UpdateCrawlerInput,
    UserDefinedResourceDeleteInput,
    UserDefinedResourceInfoInput,
    UserDefinedResourceInput,
)


class Mutation:
    @classmethod
    def acknowledge_change_request(
        cls, input: AcknowledgeChangeRequestInput
    ) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AcknowledgeChangeRequestInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="acknowledgeChangeRequest", arguments=cleared_arguments
        )

    @classmethod
    def add_tenant(cls, input: AddTenantInput) -> TenantInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddTenantInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TenantInfoFields(field_name="addTenant", arguments=cleared_arguments)

    @classmethod
    def add_webhook(cls, input: AddWebhookInput) -> WebhookFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddWebhookInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebhookFields(field_name="addWebhook", arguments=cleared_arguments)

    @classmethod
    def create_crawler(cls, input: CreateCrawlerInput) -> CrawlerFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCrawlerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CrawlerFields(field_name="createCrawler", arguments=cleared_arguments)

    @classmethod
    def create_group(cls, data: GroupInput) -> GroupFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "GroupInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFields(field_name="createGroup", arguments=cleared_arguments)

    @classmethod
    def create_key(cls, key: CreateApiKeyInput) -> ApiKeyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "key": {"type": "CreateApiKeyInput!", "value": key}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApiKeyFields(field_name="createKey", arguments=cleared_arguments)

    @classmethod
    def create_knowledge_card(cls, data: KnowledgeCardInput) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "KnowledgeCardInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="createKnowledgeCard", arguments=cleared_arguments
        )

    @classmethod
    def create_namespace(cls, data: NamespaceInput) -> NamespaceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "NamespaceInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NamespaceFields(
            field_name="createNamespace", arguments=cleared_arguments
        )

    @classmethod
    def create_user_defined_resource(
        cls, input: UserDefinedResourceInput
    ) -> UserDefinedResourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UserDefinedResourceInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserDefinedResourceFields(
            field_name="createUserDefinedResource", arguments=cleared_arguments
        )

    @classmethod
    def delete_crawlers(cls, input: DeleteCrawlerInput) -> DeleteCrawlersResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteCrawlerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteCrawlersResponseFields(
            field_name="deleteCrawlers", arguments=cleared_arguments
        )

    @classmethod
    def delete_keys(cls, input: ApiKeyDeleteInput) -> ApiKeyDeletionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ApiKeyDeleteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApiKeyDeletionPayloadFields(
            field_name="deleteKeys", arguments=cleared_arguments
        )

    @classmethod
    def delete_knowledge_cards(
        cls, input: KnowledgeCardDeleteInput
    ) -> KnowledgeCardDeletePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "KnowledgeCardDeleteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardDeletePayloadFields(
            field_name="deleteKnowledgeCards", arguments=cleared_arguments
        )

    @classmethod
    def delete_namespaces(
        cls, input: NamespaceDeleteInput
    ) -> NamespaceDeletePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "NamespaceDeleteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NamespaceDeletePayloadFields(
            field_name="deleteNamespaces", arguments=cleared_arguments
        )

    @classmethod
    def delete_user_defined_resource(
        cls, input: UserDefinedResourceDeleteInput
    ) -> UserDefinedResourceDeletePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UserDefinedResourceDeleteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserDefinedResourceDeletePayloadFields(
            field_name="deleteUserDefinedResource", arguments=cleared_arguments
        )

    @classmethod
    def delete_webhooks(cls, input: DeleteWebhooksInput) -> DeleteWebhookResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWebhooksInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWebhookResponseFields(
            field_name="deleteWebhooks", arguments=cleared_arguments
        )

    @classmethod
    def drop_tenant(cls, input: DropTenantInput) -> TenantInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DropTenantInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TenantInfoFields(field_name="dropTenant", arguments=cleared_arguments)

    @classmethod
    def edit_person(cls, input: PersonPatchInput) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PersonPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(field_name="editPerson", arguments=cleared_arguments)

    @classmethod
    def edit_user_role(
        cls, user: PersonInput, *, role: Optional[UserRole] = None
    ) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "role": {"type": "UserRole", "value": role},
            "user": {"type": "PersonInput!", "value": user},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(field_name="editUserRole", arguments=cleared_arguments)

    @classmethod
    def follow(cls, input: FollowAssetInput) -> FollowOrUnfollowOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "FollowAssetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FollowOrUnfollowOutputFields(
            field_name="follow", arguments=cleared_arguments
        )

    @classmethod
    def install_teams(cls, teams_tenant_id: str) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "teamsTenantId": {"type": "String!", "value": teams_tenant_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(field_name="installTeams", arguments=cleared_arguments)

    @classmethod
    def invite_people(
        cls, invitees: InvitedPersonInput, *, invitation_message: Optional[str] = None
    ) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "invitationMessage": {"type": "String", "value": invitation_message},
            "invitees": {"type": "InvitedPersonInput!", "value": invitees},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(field_name="invitePeople", arguments=cleared_arguments)

    @classmethod
    def like(cls, input: AssetLikeInput) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AssetLikeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(field_name="like", arguments=cleared_arguments)

    @classmethod
    def patch_update_namespace_info(
        cls, input: NamespaceInfoPatchInput
    ) -> NamespaceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "NamespaceInfoPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NamespaceFields(
            field_name="patchUpdateNamespaceInfo", arguments=cleared_arguments
        )

    @classmethod
    def pin(cls, input: PinOrUnpinAssetInput) -> PersonPinsPinningOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PinOrUnpinAssetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonPinsPinningOutputFields(
            field_name="pin", arguments=cleared_arguments
        )

    @classmethod
    def post_login(cls) -> PersonFields:
        return PersonFields(field_name="postLogin")

    @classmethod
    def record_last_active(cls, input: LastActiveInput) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "LastActiveInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(field_name="recordLastActive", arguments=cleared_arguments)

    @classmethod
    def run_crawler(cls, crawler_id: str) -> RunCrawlerResponseFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "crawlerId": {"type": "String!", "value": crawler_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RunCrawlerResponseFields(
            field_name="runCrawler", arguments=cleared_arguments
        )

    @classmethod
    def uninstall_teams(cls, teams_tenant_id: str) -> GraphQLField:
        arguments: Dict[str, Dict[str, Any]] = {
            "teamsTenantId": {"type": "String!", "value": teams_tenant_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GraphQLField(field_name="uninstallTeams", arguments=cleared_arguments)

    @classmethod
    def update_availability_status(
        cls, input: KnowledgeCardAvailabilityStatusPatchInput
    ) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "KnowledgeCardAvailabilityStatusPatchInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="updateAvailabilityStatus", arguments=cleared_arguments
        )

    @classmethod
    def update_change_request_status(
        cls, input: ChangeRequestStatusPatchInput
    ) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChangeRequestStatusPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="updateChangeRequestStatus", arguments=cleared_arguments
        )

    @classmethod
    def update_common_column_attributes(
        cls, input: CommonColumnAttributesPatchInput
    ) -> UserDefinedResourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CommonColumnAttributesPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserDefinedResourceFields(
            field_name="updateCommonColumnAttributes", arguments=cleared_arguments
        )

    @classmethod
    def update_common_column_description_exclusion(
        cls, input: CommonColumnDescriptionExclusionInput
    ) -> UserDefinedResourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CommonColumnDescriptionExclusionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserDefinedResourceFields(
            field_name="updateCommonColumnDescriptionExclusion",
            arguments=cleared_arguments,
        )

    @classmethod
    def update_crawler(
        cls, crawler_id: str, input: UpdateCrawlerInput
    ) -> CrawlerFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "crawlerId": {"type": "ID!", "value": crawler_id},
            "input": {"type": "UpdateCrawlerInput!", "value": input},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CrawlerFields(field_name="updateCrawler", arguments=cleared_arguments)

    @classmethod
    def update_curated_query(
        cls, input: QueryKnowledgeCardPatchInput
    ) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "QueryKnowledgeCardPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="updateCuratedQuery", arguments=cleared_arguments
        )

    @classmethod
    def update_group_info(cls, data: GroupInfoInput) -> GroupFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "GroupInfoInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFields(field_name="updateGroupInfo", arguments=cleared_arguments)

    @classmethod
    def update_group_members(cls, input: GroupMembersPatchInput) -> GroupFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "GroupMembersPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GroupFields(field_name="updateGroupMembers", arguments=cleared_arguments)

    @classmethod
    def update_hashtags(cls, input: HashtagPatchInput) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "HashtagPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="updateHashtags", arguments=cleared_arguments
        )

    @classmethod
    def update_key(cls, id: str, key: UpdateApiKeyInput) -> ApiKeyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "id": {"type": "ID!", "value": id},
            "key": {"type": "UpdateApiKeyInput!", "value": key},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApiKeyFields(field_name="updateKey", arguments=cleared_arguments)

    @classmethod
    def update_knowledge_card_info(
        cls, data: KnowledgeCardInfoInput
    ) -> KnowledgeCardFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "KnowledgeCardInfoInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return KnowledgeCardFields(
            field_name="updateKnowledgeCardInfo", arguments=cleared_arguments
        )

    @classmethod
    def update_namespace_assets(
        cls, input: NamespaceAssetsPatchInput
    ) -> NamespaceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "NamespaceAssetsPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NamespaceFields(
            field_name="updateNamespaceAssets", arguments=cleared_arguments
        )

    @classmethod
    def update_namespace_info(cls, data: NamespaceInfoInput) -> NamespaceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "data": {"type": "NamespaceInfoInput!", "value": data}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NamespaceFields(
            field_name="updateNamespaceInfo", arguments=cleared_arguments
        )

    @classmethod
    def update_persona(cls, persona: Persona) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "persona": {"type": "Persona!", "value": persona}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(field_name="updatePersona", arguments=cleared_arguments)

    @classmethod
    def update_personalization(
        cls, input: PersonalizationOptionsPatchInput
    ) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PersonalizationOptionsPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(
            field_name="updatePersonalization", arguments=cleared_arguments
        )

    @classmethod
    def update_recent_ai_search(cls, input: PersonActivityInput) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PersonActivityInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(
            field_name="updateRecentAISearch", arguments=cleared_arguments
        )

    @classmethod
    def update_recently_searched(cls, input: PersonActivityInput) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PersonActivityInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(
            field_name="updateRecentlySearched", arguments=cleared_arguments
        )

    @classmethod
    def update_recently_viewed(cls, input: PersonActivityInput) -> PersonFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PersonActivityInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PersonFields(
            field_name="updateRecentlyViewed", arguments=cleared_arguments
        )

    @classmethod
    def update_settings(cls, input: SettingsInput) -> SettingsFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SettingsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SettingsFields(field_name="updateSettings", arguments=cleared_arguments)

    @classmethod
    def update_user_defined_resource_info(
        cls, input: UserDefinedResourceInfoInput
    ) -> UserDefinedResourceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UserDefinedResourceInfoInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserDefinedResourceFields(
            field_name="updateUserDefinedResourceInfo", arguments=cleared_arguments
        )

    @classmethod
    def upsert_asset_contacts(cls, input: AssetContactsPatchInput) -> EntityInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AssetContactsPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EntityInterface(
            field_name="upsertAssetContacts", arguments=cleared_arguments
        )

    @classmethod
    def upsert_asset_governed_tags(
        cls, input: AssetGovernedTagsPatchInput
    ) -> EntityInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AssetGovernedTagsPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return EntityInterface(
            field_name="upsertAssetGovernedTags", arguments=cleared_arguments
        )

    @classmethod
    def upsert_custom_namespace_order(
        cls, input: NamespaceAssetsUserDefinedOrderInput
    ) -> NamespaceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "NamespaceAssetsUserDefinedOrderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NamespaceFields(
            field_name="upsertCustomNamespaceOrder", arguments=cleared_arguments
        )

    @classmethod
    def upsert_related_assets(cls, input: MetricInfoPatchInput) -> MetricFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MetricInfoPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MetricFields(
            field_name="upsertRelatedAssets", arguments=cleared_arguments
        )

    @classmethod
    def upsert_schema_field_governed_tags(
        cls, input: FieldTagAssociationsPatchInput
    ) -> DatasetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "FieldTagAssociationsPatchInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DatasetFields(
            field_name="upsertSchemaFieldGovernedTags", arguments=cleared_arguments
        )
